#!/bin/bash 
###############################################################################
# This script does a auto-discovery of printers on networks by using ping
# and snmpget cycling through a range of IP that is defined in a separate
# network list file and IP range.
#
# 
# Based on the work of frank4dd@com
# run: printerconf-gen-so.sh ARGV > printers-so.cfg 2>/dev/null
###############################################################################

# No external redirect - redirect all output to cotrrect place directly
PRINTCONF=/usr/local/shinken/etc/hosts/printers.cfg
# stdout replaced with file "printers.cfg"

# First, we create the configuration file header and template information
cat<<'END' > $PRINTCONF
###############################################################################
# HOST GROUP DEFINITIONS printers
###############################################################################
define hostgroup{
  hostgroup_name        generic-printers-so       ; The name of the hostgroup
  alias                 Generic Printers           ; Alias details of the group
}
define hostextinfo {
  hostgroup_name        generic-printers-so         ; The name of the hostgroup
  use                   basic
}
define hostgroup{
  hostgroup_name        xerox-printers-so           ; The name of the hostgroup
  alias                 Xerox Printers in SO        ; Alias details of the group
}
define hostgroup{
  hostgroup_name        kyocera-printers-so         ; The name of the hostgroup
  alias                 Kyocera Printers in SO      ; Alias details of the group
}
define hostgroup{
  hostgroup_name        HP-printers-so              ; The name of the hostgroup
  alias                 Hewlewtt Packard in SO      ; Alias details of the group
}
define hostgroup{
  hostgroup_name        epson-printers-so           ; The name of the hostgroup
  alias                 epson prointers in SO       ; Alias details of the group
}
###############################################################################
# PRINTER DEFINITION templates - These are NOT a real hosts, just a template!
###############################################################################
define host{
  name                  generic-printer-so ; The name of this host template
  use                   generic-host       ; Inherit default values from the generic-host template
  check_period          24x7               ; monitor weekdays 8-8
  check_interval        5                  ; Actively check the server every 5 minutes
  retry_interval        1                  ; Schedule host check retries at 1 minute intervals
  max_check_attempts    5                  ; Check each server 10 times (max)
  check_command         check_host_alive   ; Default command to check if servers are "alive"
  #check_command         check_hpjd         ; Default command to check if servers are "alive"
  notification_period   none               ; printers enter "sleep" mode each night - they go "down"
  notification_interval 240                ; Resend notifications every 120 minutes
  notification_options  d,u,r              ; Only send notifications for specific host states
  contact_groups        admins
  hostgroups            printers-salesoffice, 8-all-printers
  register              0                  ; DONT REGISTER THIS - ITS JUST A TEMPLATE
}
define host{
  name                  HP-printer-so      ; The name of this host template
  use                   generic-host       ; Inherit default values from the generic-host template
  check_period          24x7               ; monitor weekdays 8-8
  check_interval        5                  ; Actively check the server every 5 minutes
  retry_interval        1                  ; Schedule host check retries at 1 minute intervals
  max_check_attempts    5                  ; Check each server 10 times (max)
  #check_command         check_hpjd         ; Default command to check if servers are "alive"
  check_command         check_host_alive   ; Default command to check if servers are "alive"
  notification_period   none               ; printers enter "sleep" mode each night - they go "down"
  notification_interval 240                ; Resend notifications every 120 minutes
  notification_options  d,u,r              ; Only send notifications for specific host states
  contact_groups        admins             ;
  hostgroups            HP-printers-so     ;
  register              0                  ; DONT REGISTER THIS - ITS JUST A TEMPLATE
}
define host{
  name                  epson-printer-so   ; The name of this host template
  use                   generic-host       ; Inherit default values from the generic-host template
  check_period          24x7               ; monitor weekdays 8-8
  check_interval        5                  ; Actively check the server every 5 minutes
  retry_interval        1                  ; Schedule host check retries at 1 minute intervals
  max_check_attempts    5                  ; Check each server 10 times (max)
  check_command         check_host_alive   ; 
  notification_period   none               ; printers enter "sleep" mode each night - they go "down"
  notification_interval 240                ; Resend notifications every 120 minutes
  notification_options  d,u,r              ; Only send notifications for specific host states
  contact_groups        admins             ;
  hostgroups            epson-printers-so  ;
  register              0                  ; DONT REGISTER THIS - ITS JUST A TEMPLATE
}
define host{
  name                  xerox-printer-so   ; The name of this host template
  use                   generic-printer-so ; Inherit default values from the generic-host template
  hostgroups            xerox-printers-so, printers-salesoffice, 8-all-printers
  icon_image            xerox-logo.png     ; the default image for the device
  statusmap_image       xerox-logo.gd2     ; the default image for the statusmap display
  register              0                  ; DONT REGISTER THIS - ITS JUST A TEMPLATE
}
define host{
  name                  kyocera-printer-so ; The name of this host template
  use                   generic-printer-so ; Inherit default values from the generic-host template
  hostgroups            kyocera-printers-so; 
  icon_image            kyocera-logo.png   ; the default image for the device
  statusmap_image       kyocera-logo.gd2   ; the default image for the statusmap display
  register              0                  ; DONT REGISTER THIS - ITS JUST A TEMPLATE
}
define host{
  name                  HP-printer-so      ; The name of this host template
  use                   HP-printer-so      ; Inherit default values from the generic-host template
  hostgroups            HP-printers-so     ; HP printers
  icon_image            HP-logo.png        ; the default image for the device
  statusmap_image       HP-logo.gd2        ; the default image for the statusmap display
  register              0                  ; DONT REGISTER THIS - ITS JUST A TEMPLATE
}
define host{
  name                  epson-printer-so   ; The name of this host template
  use                   epson-printer-so   ; Inherit default values from the generic-host template
  hostgroups            epson-printers-so  ; HP printers
  icon_image            epson-logo.png     ; the default image for the device
  statusmap_image       epson-logo.gd2     ; the default image for the statusmap display
  register              0                  ; DONT REGISTER THIS - ITS JUST A TEMPLATE
}
###############################################################################
# PRINTER services and commands
###############################################################################

define service{ 
use generic-service 
service_description Toner Supply 
hostgroup_name (generic-printers-so|HP-printers-so|epson-printers-so)
check_command check_snmp_printer!public!"CONSUM ALL"!20!10 
} 

define service{ 
use generic-service 
service_description Printer Total Page Count 
hostgroup_name (generic-printers-so|epson-printers-so|HP-printers-so)
check_command check_snmp_printer!public!"PAGECOUNT" 
} 

define command{ 
command_name check_snmp_printer 
command_line $USER1$/check_snmp_printer -H $HOSTADDRESS$ -C $ARG1$ -x $ARG2$ -w $ARG3$ -c $ARG4$  
} 


###############################################################################
# PRINTER DEFINITIONS below
###############################################################################
END

#stop shinken
#echo anik2008 | sudo -S /usr/local/bin/shmotor  "stop"   #> /dev/null 2>&1

# Log file handling
get_logfile=/tmp/get_logfile
touch $get_logfile

# Lots of problems from Windows and others making config files = fix it.
for file in /home/vaktin/repo/*.txt ; do
    dos2unix "$file" > /dev/null 2>&1
done

# Load file into array. Save I/O's on Rasp
# Parameters kept in:
cmd_file=/home/vaktin/repo/prentvakt.txt

declare -a my_parameter
let i=0
while IFS=$'"="' read -r line_data; do
    my_parameter[i]="${line_data}"
    ((++i))
done < $cmd_file

# We only call awk = little I/O 
customer=$(printf ${my_parameter[0]} | awk -F '*|=' '{print $2}')
soip=$(printf ${my_parameter[1]} | awk -F '*|=' '{print $2}')
myip=$(printf ${my_parameter[2]} | awk -F '*|=' '{print $2}')
email=$(printf ${my_parameter[3]} | awk -F '*|=' '{print $2}')
my_start_range=$(printf ${my_parameter[4]} | awk -F '*|=' '{print $2}')
my_end_range=$(printf ${my_parameter[5]} | awk -F '*|=' '{print $2}')

# Debug
#echo $customer
#echo $soip
#echo $myip
#echo $email
#echo $my_start_range
#echo $my_end_range

# Email Parameters
#=========================================================================
if [[ -z $email ]]; then 
		email_recipient="vaktin@prentvorur.is"
	else
		email_recipient="$email"
fi
email_subject_context="Reconfiguring at $customer"
email_sender="prentvakt@prentvorur.is" # Actually rewritten on send by ssmt
template=/tmp/template
email_prog="$(which email_sender)"

# Various Parameters
#=========================================================================
timestamp=`date +%H:%M`
todays_date=`date +%d/%m/%Y`
script_path=/home/vaktin/repo/

# Main code
#=========================================================================
# Start with functions
#=========================================================================

debug() { echo "DEBUG: $*" >&2; }

ip2dec () {
    local a b c d ip=$@
    IFS=. read -r a b c d <<< "$ip"
    printf '%d\n' "$((a * 256 ** 3 + b * 256 ** 2 + c * 256 + d))"
}

dec2ip () {
    local ip dec=$@
    for e in {3..0}
    do
        ((octet = dec / (256 ** e) )) 
        ((dec -= octet * 256 ** e)) 
        ip+=$delim$octet
        delim=.
    done
    printf '%s\n' "$ip"
}

# Other code
#=========================================================================
# And we need our ip if it was not passed on to us.
if [[ -z $myip ]]; then
	#echo "myip is null or space"
	  myip=$(ip route get 8.8.8.8 | awk '/8.8.8.8/ {print $NF}') 
fi 

# If nothing was passed to us from config.txt about printers subnet then we figure it out 
# and use current IP (first interface).
if [[ -z $soip ]]; then
	#echo "soip is null or space"
	getsub=$(ip route get 8.8.8.8 | awk '/8.8.8.8/ {print $NF}') 
	soip=${getsub%.*}
fi

#echo $soip #debug
# Prepare range and ip calc
if [[ -n $soip ]]; then
	decimal=$(ip2dec $soip)
fi

if [[ -n $my_start_range ]] ; then
	my_start_range=$(dec2ip $decimal + $my_start_range )
	#echo "Got my_start_range :"
else
	my_start_range=$(dec2ip $decimal + 2 ) 
	echo "Assinging Standard start"
fi

if [[ -n $my_end_range ]] ; then
	my_end_range=$(dec2ip $decimal + $my_end_range )
	#echo "Got my_end_range :"
else
	my_end_range=$(dec2ip $decimal + 253 ) 
	echo "Assinging Standard end" 
fi

#prepare to feed this to snmp
start_range=$(echo $my_start_range | awk -F"." '{print $4}') #We only want the last digit
end_range=$(echo $my_end_range | awk -F"." '{print $4}') #We only want the last digit

cnt=1  # For creating unique printer name in def.

range=`echo -e "for i in {$start_range..$end_range}; do echo \\${i}; done" | bash`

#echo "ECHOING RANGE: " $range  #>> $get_logfile #debug

  for ip in $range; do
    # check if the system exists at all and ip pingeable
    #echo "SOIP: $soip.$ip" #Debugging
    fping -c 1 -q $soip.$ip 2>/dev/null
    # if fping received a response, the exit code will be 0
    if [ $? -eq 0 ]; then
      #snmpget -v 1 -c public 192.168.91.4 HOST-RESOURCES-MIB::hrDeviceDescr.1 -Ov
      response=`snmpget -r 1 -v 1 -c public $soip.$ip HOST-RESOURCES-MIB::hrDeviceDescr.1 -Ov 2>/dev/null` 
      # if snmpget received a response, the exit code will be 0
      if [ $? -eq 0 ]; then
        # For printers we get
        # typical response 1 (Kyocera Printer)   -> STRING: LS-C5016N
        # typical response 2 (FujiXerox Printer) -> STRING: FUJI XEROX DocuCentre-III C440 v  3.  7.  1 Multifunction System
		# No redirects in loop stout to config file
		exec >> $PRINTCONF
        echo "define host{"
        # check if we got a Kyocera
        echo $response| grep -q 'STRING: LS-'
        if [ $? -eq 0 ]; then echo "  use                   kyocera-printer-so"
        else
          # check if we got a Xerox
          echo $response| grep -q 'STRING: FUJI XEROX'
          if [ $? -eq 0 ]; then echo "  use                   xerox-printer-so"
	  else
            # check if we got a Epson
            echo $response| grep -q 'STRING: EPSON'
            if [ $? -eq 0 ]; then echo "  use                   epson-printer-so"
	    else
		# check if we got a Epson
            	echo $response| grep -q 'STRING: HP\|STRING: Deskjet\|STRING: Officejet'
            	if [ $? -eq 0 ]; then echo "  use                   HP-printer-so"
            	else
              		         echo "  use                   generic-printer-so"
	    fi
           fi
          fi
        fi
        echo "  alias             $customer-printer-$cnt"
        #echo "  alias            $customer-printer-$cnt (`echo $response| cut -d ' ' -f 2-5` $cnt)"
        echo "  host_name            `echo $response| cut -d ' ' -f 2-5` $cnt"
        echo "  address              $soip.$ip"
        echo "}"
        cnt=`expr $cnt + 1`
		fi
    fi
done
echo "I found " `expr $cnt - 1` "printers during scan" >> $get_logfile
echo "----------------------------------------------------------------------------------" >> $get_logfile

echo "Restarting shinken" >> $get_logfile

. /usr/local/bin/shmotor "restart"  >> $get_logfile



